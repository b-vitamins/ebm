[tool.poetry]
name = "ebm"
version = "0.1.0"
description = "A modern PyTorch library for energy-based machine learning models"
authors = ["Ayan Das <bvits@riseup.net>"]
readme = "README.md"
homepage = "https://github.com/yourusername/ebm"
repository = "https://github.com/yourusername/ebm"
documentation = "https://ebm.readthedocs.io"
keywords = ["machine-learning", "deep-learning", "pytorch", "rbm", "energy-based-models"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]
license = "MIT"
packages = [{include = "ebm"}]

[tool.poetry.dependencies]
python = "^3.11"
torch = "2.7.0"
numpy = "1.26.2"
matplotlib = "3.8.2"
tqdm = "4.67.1"
pydantic = "1.10.19"
structlog = "23.1.0"
torchvision = "0.22.0"
typing-extensions = "4.12.2"
rich = {version = "13.7.1", optional = true}

[tool.poetry.group.viz]
optional = true

[tool.poetry.group.viz.dependencies]
seaborn = "0.13.1"
plotly = "5.20.0"
pillow = "11.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "8.3.3"
pytest-cov = "6.0.0"
pytest-xdist = "3.6.1"
mypy = "1.13.0"
ruff = "0.9.3"
types-PyYAML = "6.0.12.20240311"
PyYAML = "6.0.1"
mutmut = "3.3.0"
pytest-benchmark = "4.0.0"
memory-profiler = "0.61.0"
psutil = "5.9.0"

[tool.poetry.group.extras]
optional = true

[tool.poetry.group.extras.dependencies]
scikit-learn = "==1.6.1"
pandas = "==2.2.3"
pyyaml = "==6.0.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 80
target-version = "py311"
exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    ".git",
    ".github",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "UP",
    "B",
    "N",
    "D",
    "C90",
    "ANN",
    "S",
    "BLE",
    "A",
    "C4",
    "DTZ",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "PT",
    "RET",
    "TRY",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "ERA",
]
ignore = [
    "E203",
    "E501",
    "D100",
    "D104",
    "N999",
    "S101",
    "PLR0913",
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["torch", "numpy", "matplotlib", "tqdm", "pydantic", "structlog"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"numpy" = "np"
"pandas" = "pd"
"seaborn" = "sns"
"matplotlib.pyplot" = "plt"
"torch.nn.functional" = "F"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
strict = true
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
warn_unused_ignores = false
no_implicit_reexport = false

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*",
    "tqdm.*",
    "torchvision.*",
    "structlog.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
    "--cov=ebm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["ebm"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''